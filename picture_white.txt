#include <opencv2/core/core.hpp>
#include <opencv2/imgproc/imgproc.hpp>
#include <opencv2/objdetect/objdetect.hpp>
#include <opencv2/highgui/highgui.hpp>
#include "opencv2/opencv.hpp"
#include "opencv2/opencv_lib.hpp"

int width_size = 512;
int height_size = 512;


using namespace std;
using namespace cv;

int main(int argc, char *argv[])
{
	Mat input_img = imread("lena.jpg");
	if (input_img.empty())
	{
		cout << "Not found";
		return -1;
	}

	Mat hsv_skin_img = Mat(Size(width_size, height_size), CV_8UC3);
	Mat smooth_img;
	Mat hsv_img;

	string cascadeName = "haarcascades/haarcascade_frontalface_alt.xml";
	CascadeClassifier cascade;
	if (!cascade.load(cascadeName))
	{
		cout << "Not load";
		return -1;
	}
	vector<Rect> faces;// マルチスケール（顔）探索
	cascade.detectMultiScale(input_img, faces, 1.1, 2, 0, Size(30, 30));
	// 画像，出力矩形，縮小スケール，最低矩形数，（フラグ），最小矩形


	/*for (int i = 0; i < faces.size(); i++)
	{
		rectangle(input_img, Point(faces[i].x, faces[i].y), Point(faces[i].x + faces[i].width, faces[i].y + faces[i].height), Scalar(0, 200, 0), 3, CV_AA);
	}*/


	hsv_skin_img = Scalar(0, 0, 0);

	medianBlur(input_img, smooth_img, 7);	//ノイズがあるので平滑化
	cvtColor(smooth_img, hsv_img, CV_BGR2HSV);	//HSVに変換		
	for (int y = 0; y < height_size; y++)
	{
		for (int x = 0; x < width_size; x++)
		{
			int a = hsv_img.step*y + (x * 3);
			if (hsv_img.data[a] >= 0 && hsv_img.data[a] <= 15 && hsv_img.data[a + 1] >= 50 && hsv_img.data[a + 2] >= 50) //HSVでの検出
			{
				hsv_skin_img.data[a + 0] = 255; //肌色部分を変色_B
				hsv_skin_img.data[a + 1] = 255; //肌色部分を変色_G
				hsv_skin_img.data[a + 2] = 255; //肌色部分を変色_R
			}
		}
	}
	imshow("input_img", input_img);
	imshow("hsv_skin_img", hsv_skin_img);
	/*if (waitKey(30) >= 0)
	{

		namedWindow("result", CV_WINDOW_AUTOSIZE | CV_WINDOW_FREERATIO);
		imshow("result", input_img);
		
	}*/
	waitKey(0);
		return 0;
	
}